Change Log
==============
1.0.0.4
=======
* Scrobbler is now tested so far, function is confirmed for Source=L(Software)
* Put an IClonable into Track, TrackInfo and MetaData
- Fixed Scrobbler handshake, now REALLY works(some source code line was missing) *ooops*
- Added ToXMLElement() to Station class
- Now LastFmClient class checks if the user is tuned in before getting the playlist

In ScrobblerCache:
- Changed ScrobblerCache the way that data are saved to an XmlDocument object by default,
  which can be gotten by the xmldoc property
- ScrobbleCache is 100% compatible to last.fm's client caches, but the submissions also contain an
  attribute containing the username(thought that was useful)
- now got an AutoSave-property which makes it automatically writing the cache to the path in SavePath
  property if set to true
- write method now contains optional autoWrite parameter, which automatically saves the cache to disk
- concated AutoSave property and autoWrite param with "or" so contents are written if one of these is
  set to true
1.0.0.3pre1
=======
* DONE writing the SCROBBLER(please note thate the code is UNTESTED yet!)
* Added new LastFmClient class, which provides functions related to the radio
  (e.g. Login(), ChangeStation(), GetPlaylist(), some meta data reqests(like album meta data))
* RENAMED User to LastFmUser(!!!), because if importing the TypeClasses namespace outside the
  library project, there was a name conflict with a class in .Net's default namespaces
  within the variable inspector(don't know if it's the right term....) :(
* Added (Un)Love, (Un)Ban, unListen and AddTrackToPersonalPlaylist function to LastFmUser class
* Now a HOWTO file is included which I'll fill by the time...
- Corrected a bug in NeighboursRequest, which gave wrong weightings
- Corrected a (stupid) bug which caused some requests to have zero results
- WeightedStringList now seems to work, had to remove the sort regions in qsort(now only the whole list can be sorted :( ) so
  I could use the Comparer(of T) delegate (which seeemed the easiest way to me^^)
- Also did that to WeightedArtistList class....


TODO
==============
- RequestQueue
- Test all classes(not done yet)
- Complete '''<summary> descriptions
- Request serialisation
- Check if the code for doing requests asynchronously is right or not


in RSS Namespace:
ChannelHeader.vb:
-Code something for InputBox

In NeighboursRequest:
- Maybe also include UserPicture urls

    *  Album
          o album.addTags
          o album.removeTag
    * Artist
          o artist.addTags
          o artist.removeTag
          o artist.share
    * Auth
          o auth.getMobileSession
          o auth.getSession
          o auth.getToken
    * Event
          o event.attend

    * Playlist
          o playlist.fetch

    * Track
          o track.addTags
          o track.ban
          o track.getTopFans
          o track.getTopTags
          o track.love
          o track.removeTag
          o track.search
          o track.share
    * User
          o user.getEvents
          o user.getFriends
          o user.getNeighbours
          o user.getPlaylists
          o user.getRecentTracks
          o user.getTopAlbums
          o user.getTopArtists
          o user.getTopTags
          o user.getTopTracks






Notes
=================
- IsValidForDeserialization is run twice on deserialzization, maybe fix that later on
- if there's an deserialization fault, setFailed is run


